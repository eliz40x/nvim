snippet all
  // {{{ include and macros
  #define debug(x) cout<<#x<<": "<<x<<endl
  #define rep(i, a, b) for(int i=a; i < b;i++)
  #include <algorithm>
  #include <array>
  #include <iostream>
  #include <map>
  #include <math.h>
  #include <set>
  #include <stdio.h>
  #include <string>
  #include <utility>
  #include <vector>
  using namespace std;
  // }}}
  
  // {{{ io
  void newline() {cout << endl;}
  template <typename T> void display(T input){cout << input;}
  template <typename T> void put(T input){display(input); newline();}
  template <typename T> void vec_put(vector<T> v){
    for(auto &a: v){display(a);display(" ");}
    newline();
  }
  int input_int(){int a; cin >> a; return a;}
  string input_string(){string a; cin >> a; return a;}
  template<typename T, typename F> vector<T> map(vector<T> v, F f){
    for(auto &a: v) a=f(a);
    return v;
  }
  // }}}

  int main() {
    ios::sync_with_stdio(false);
  }

snippet io
  void newline() {cout << endl;}
  template <typename T> 
  void display(T input){cout << input;}
  template <typename T>
  void put(T input){display(input); newline();}
  template <typename T>
  void vec_put(vector<T> v){
  for(auto &a: v){display(a);display(" ");}newline();}
  int input_int(){
  int a; cin >> a; return a;}
  string input_string(){
  string a; cin >> a; return a;}

snippet vec_func
  // func_vector {{{
  template <typename T> vector<T> f_reverse(vector<T> v){
    std::reverse(v.begin(), v.end());
    return v;
  }
  template <typename T> vector<T> f_sort(vector<T> v){
    std::sort(v.begin(), v.end());
    return v;
  }
  template<typename T, typename F> vector<T> map(vector<T> v, F f){
    for(auto &a: v) a=f(a);
    return v;
  }
  // }}}

