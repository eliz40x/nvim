plugin: 
  basyura/TweetVim:
    dependon:
      - webapi-vim
      - twibill.vim
      - open-browser.vim
      - unite-outline
      - bitly.vim
  mattn/webapi-vim: {}
  basyura/twibill.vim: {}
  tyru/open-browser.vim: {}
  h1mesuke/unite-outline: {}
  basyura/bitly.vim: {}
  easymotion/vim-easymotion: {}
  cespare/vim-toml:
    filetype: toml
    before: |
      let g:EasyMotion_use_smartsign_us = 1
      let g:EasyMotion_do_mapping = 0
      let g:EasyMotion_smartcase = 1

  junegunn/fzf:
    command: FZF

  Shougo/vimproc:
    build: make
    function: vimproc

  godlygeek/tabular:
    command: Tabularize

  Konfekt/FastFold: {}
  itchyny/vim-cursorword: {}

  itchyny/vim-parenmatch:
    before: |
      let g:loaded_matchparen = 1

  junegunn/goyo.vim:
    command: Goyo

  Shougo/unite.vim:
    dependon: vimproc
    before: |
      let g:unite_enable_start_insert       = 1
      let g:unite_enable_ignore_case        = 1
      let g:unite_enable_smart_case         = 1
      let g:unite_source_grep_command       = 'fzf'
      let g:unite_source_grep_default_opts  = '--no-group --no-color'
      let g:unite_source_grep_recursive_opt = ''

  Shougo/neoyank.vim:
    dependon:
      - vimproc
      - unite
    before: |
      let g:neoyank#limit=10
 
  ujihisa/unite-haskellimport:
    filetype: haskell
    dependon:
      - vimproc
      - unite
    before: |
      let g:unite_source_haddock_browser = 'surf'

  eagletmt/unite-haddock:
    filetype: haskell
    dependon:
      - vimproc
      - unite 

  majutsushi/tagbar:
    filetype: haskell
    before: |
      set tags=tags;/,codex.tags;/
      let g:tagbar_type_haskell = {
        \ 'ctagsbin'  : 'hasktags',
        \ 'ctagsargs' : '-x -c -o-',
        \ 'kinds'     : [
          \  'm:modules:0:1',
          \  'd:data: 0:1',
          \  'd_gadt: data gadt:0:1',
          \  't:type names:0:1',
          \  'nt:new types:0:1',
          \  'c:classes:0:1',
          \  'cons:constructors:1:1',
          \  'c_gadt:constructor gadt:1:1',
          \  'c_a:constructor accessors:1:1',
          \  'ft:function types:1:1',
          \  'fi:function implementations:0:1',
          \  'o:others:0:1'
        \ ],
        \ 'sro'        : '.',
        \ 'kind2scope' : {
          \ 'm' : 'module',
          \ 'c' : 'class',
          \ 'd' : 'data',
          \ 't' : 'type'
        \ },
        \ 'scope2kind' : {
          \ 'module' : 'm',
          \ 'class'  : 'c',
          \ 'data'   : 'd',
          \ 'type'   : 't'
        \ }
      \ }
 
  jaspervdj/stylish-haskell:
    filetype: haskell
    before: |
      set formatprg=stylish-haskell
  
  tpope/vim-fugitive: {}
  cohama/agit.vim:
    command: Agit

  tpope/vim-surround: {}
  itchyny/lightline.vim:
    before: |
      let g:lightline = { 'colorscheme': 'gruvbox' }

  Yggdroot/indentLine:
    filetype: 
      - html
      - yaml

  Shougo/deoplete.nvim:
    before: |
      let g:deoplete#enable_at_startup          = 1
      let g:deoplete#enable_smart_case          = 1
      let g:deoplete#auto_complete_start_length = 2
      let g:deoplete#max_list                   = 15
      function! DoRemote(arg)
        UpdateRemotePlugins
      endfunction
  
  romainl/Apprentice: {}
  morhetz/gruvbox: {}
  lilydjwg/colorizer: {}
  eagletmt/ghcmod-vim:
    filetype: haskell
    dependon: vimproc
    before: |
      let g:ghcmod_ghc_options = ['-Wall']

  eagletmt/neco-ghc:
    filetype: haskell
    dependon: vimproc
    before: |
      let g:necoghc_enable_detailed_browse = 1

  dag/vim2hs:
    filetype: haskell
    dependon: tabular
    before: |
      let g:haskell_conceal              = 0
      let g:haskell_conceal_wide         = 0
      let g:haskell_conceal_enumerations = 0
      let g:haskell_quasi                = 1
      let g:haskell_interpolation        = 1
      let g:haskell_regex                = 0
      let g:haskell_jmacro               = 0
      let g:haskell_shqq                 = 0
      let g:haskell_sql                  = 0
      let g:haskell_json                 = 1
      let g:haskell_xml                  = 0
      let g:haskell_hsp                  = 0
      let g:haskell_multiline_strings    = 0
      let g:haskell_tabular              = 1

  itchyny/vim-haskell-indent:
    filetype: haskell
  
  pbrisbin/vim-syntax-shakespeare.git:
    filetype: haskell

  davidhalter/jedi-vim:
    filetype: python

  yuratomo/w3m.vim:
    command: W3m

before: |
 if v:version < 703
   finish
 endif

after: |
  colorscheme gruvbox
